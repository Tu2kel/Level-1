const readline = require("readline-sync")


//#region STORED USER with USERNAME + GREETING
const userName = readline.question("State your name = ");
console.log(userName + "!" + " You've Escaped the Escape Room, ONLY to Start the REAL🩸Game");
//#endregion

//#region INTRO
// readline.question(
//   "🤡 As a Software Engineer you should be familiar with Polya's Process." +
//     ":" + " Press Enter" 
    
// );

// readline.question(
//   "🤡 If you can't manage to Solve the Problem..." + ":" + " Press Enter"
//   );
  
//   readline.question(
//     "🤡 Will You Escape with YOUR LIFE?" + ":" + " Press Enter"
//     );
    
//     readline.question(
//       "🤡 What is the extent you will go through in order to Survive? " +
//         ":" +
//         " Press Enter"
//     );

// readline.question(
//   " Your Killers for this EVENING... Mark Hoffman: SAW 3, 4, 5, 6, and SAW 3D " + "Logan Nelson: Jigsaw " + " and the Pinnacle of SAW - John Kramer AKA JIGSAW! " + "..Dare to Press Enter: "
// );
readline.question(
  "🤡 LIVE or DIE...Make Your Choice" + ":" + " Press Enter"
);

//#endregion

//#region Values / Initializers

// let haskey = false;
// let hasWeapon = false;
isAlive = true; // UNDER WHILE LOOP > SHOULD ALLOW PLAYER TO CONTINUE WITH CHOICES; IF FALSE GAME COMPLETES 
const moves = [1, 2, 3, 4, 5]; //✅
const weapons = [ " ShotGun Full of Ammo ", " Machete ", " Bruce_Lee_Video_Tapes ",];
const enemies = ["Logan_Nelson, " , "Jigsaw, " , "Mark_Hoffman "];
//#endregion

const options = [" Attacks ", " Inventory ", ]

// #region STATS
let playerInventory = [];
let playerHP = 100
let enemyHP = 50;

let user = {
  name: userName,
  
  
};

const Logan_Nelson = {
  name: 'Logan_Nelson',
};

const Jigsaw = {
  name: enemies[1],
};

const Mark_Hoffman = {
  name: enemies[2],
};




// #endregion


function enemyAction() {

  const random = Math.floor(Math.random() * enemies.length);
  const enemy = enemies[random];
  let enemyHP = 50;

  console.log(enemy + "🐷 is after you");

    function battle() {
    readline.question('Fight (f) or Run (r)? ', (choice) => {
      if (enemyHP <= 0) {
        console.log(`You have defeated ${enemy}! ...for now`);
        const hpGain = 20;
        playerHP += hpGain;
        console.log(`You gained ${hpGain} HP!`);
        const specialItem = `😉Special Item Pre Core Pillz; 💊 PCP 😉 for short: PCP💊${playerInventory.length + 1}`;
        playerInventory.push(specialItem);
        console.log(`You obtained a 😉special item: ${specialItem}!`);
        console.log(`Press 'w' to walk, 'p' for status, or 'q' to quit`);
        return;
      }

      if (choice === 'f') {
        const minDamage = 10;
        const maxDamage = 20;
        const damage = Math.floor(Math.random() * (maxDamage - minDamage + 1)) + minDamage;
        console.log(`You attacked ${enemy} and dealt ${damage} damage!`);
        enemyHP -= damage;

        if (enemyHP <= 0) {
          return battle();
        } else {
          const enemyDamage = Math.floor(Math.random() * (maxDamage - minDamage + 1)) + minDamage;
          console.log(`${enemy} attacked you and dealt ${enemyDamage} damage!`);
          playerHP -= enemyDamage;

          if (playerHP <= 0) {
            console.log(`You have been relieved of life by 🐷 ${enemy}!`);
            console.log('🩸!GAME🐷OVER!🩸');
            isAlive = false;
            return;
          } else {
            console.log(`You have ${playerHP} HP left`);
            console.log(`${enemy} has ${enemyHP} HP left`);
            return battle();
          }
        }
      } else if (choice === 'r') {
        const escape = Math.random() < 0.5;
        if (escape) {
          console.log(`${userName} breathes heavily, 💭Safe for now!`);
          console.log(`Press 'w' to walk, 'p' for status, or 'q' to quit`);
          return;
        } else {
          const minDamage = 10;
          const maxDamage = 20;
          const enemyDamage = Math.floor(Math.random() * (maxDamage - minDamage + 1)) + minDamage;
          console.log(`${enemy} attacked you and dealt ${enemyDamage} damage!`);
          playerHP -= enemyDamage;

          if (playerHP <= 0) {
            console.log(`You have been defeated by ${enemy}!`);
            console.log('🩸!GAME🐷OVER!🩸');
            isAlive = false;
            return;
          } else {
            console.log(`You have ${playerHP} HP left`);
            console.log(`${enemy} has ${enemyHP} HP left`);
            return battle();
          }
        }
              }else {
                // Invalid Option
                console.log('Invalid Option');
                return battle();
                
              }
      })
    }

  }; 
  enemyAction()
       battle()
   


    
/*----------------------------------------------------------------*/
// //#region 

// const readline = require('readline');
// // const readline = readline.createInterface({
// let rl = readlineInterface({
//   input: process.stdin,
//   output: process.stdout
// });

// let readlineInterface = rl

// // Welcome message
// console.log('Welcome to the Adventure Game!');

// // Prompt the user for their name
// let playerName;
// // const userName = 
// readline.question("State your name = ", (answer) => {
//   playerName = answer;
//   console.log(`Hi ${playerName}! Let's begin the adventure!`);
//   console.log(`You are starting with 100 HP`);
//   console.log(`Type 'w' to walk, 'p' to print your stats, or 'q' to quit the game`);
// });

// //#endregion

// // Player stats
// // let playerHP = 100;
// // let playerInventory = [];

// //#region Game loop
// while (true) {
//   readline.question('> ', (answer) => {

//     if (answer === 'w') {
//       // Walking
//       console.log('You are walking...');
      
//  // LOOK INTO ENEMY APPEARED      
//       // Randomly determine if a wild enemy has appeared
//       const hasEnemyAppeared = Math.random() < 0.25;
      
//       if (hasEnemyAppeared) {
//         // An enemy has appeared
//         console.log('A wild enemy has appeared!');
        
//         // Randomly choose an enemy name
//         // const enemyNames = ['Goblin', 'Skeleton', 'Orc'];
//         // const enemyName = enemyNames[Math.floor(Math.random() * enemyNames.length)];
//         // console.log(`It's a ${enemyName}!`);
        
//         // Loop until the battle is over
//         let enemyHP = 50;
//         while (true) {
//           // Prompt the player for their action
//           readline.question('Attack (a) or Run (r)? ', (action) => {
//             if (action === 'a') {
//               // Attacking
//               const minDamage = 10;
//               const maxDamage = 20;
//               const damage = Math.floor(Math.random() * (maxDamage - minDamage + 1)) + minDamage;
//               console.log(`You attacked the ${enemyName} and dealt ${damage} damage!`);
//               enemyHP -= damage;
//               if (enemyHP <= 0) {
//                 // The enemy has been defeated
//                 console.log(`You have defeated the ${enemyName}!`);
                
//                 // Award the player with some HP and a special item
//                 const hpGain = 20;
//                 playerHP += hpGain;
//                 console.log(`You gained ${hpGain} HP!`);
//                 const specialItem = `Special Item ${playerInventory.length + 1}`;
//                 playerInventory.push(specialItem);
//                 console.log(`You obtained a special item: ${specialItem}!`);
                
//                 // Continue walking
//                 console.log(`Type 'w' to walk, 'p' to print your stats, or 'q' to quit the game`);
//               } else {
//                 // The enemy is still alive
//                 const enemyDamage = Math.floor(Math.random() * (maxDamage - minDamage + 1)) + minDamage;
//                 console.log(`The ${enemyName} attacked you and dealt ${enemyDamage} damage!`);
//                 playerHP -= enemyDamage;
//                 if (playerHP <= 0) {
//                   // The player has been defeated
//                   console.log(`You have been defeated by the ${enemyName}!`);
//                   console.log('GAME OVER');
//                   process.exit(0);
//                 } else {
//                   // The battle continues
//                   console.log(`You have ${playerHP} HP left`);
//                   console.log(`The ${enemyName} has ${enemyHP} HP left`);
//                 }
//               } 
//             } 
//             // Running
//             else if (action === 'r') {
//               const canEscape = Math.random() < 0.5;
//               if (canEscape) {
//                 // The player successfully escaped
//                 console.log('You successfully escaped!');
//                 console.log(`Type 'w' to walk, 'p' to print your stats, or 'q' to quit the game`);
//               } else {
//                 // The player failed to escape
//                 const enemyDamage = Math.floor(Math.random() * (maxDamage - minDamage + 1)) + minDamage;
//                 console.log(`The ${enemyName} attacked you and dealt ${enemyDamage} damage!`);
//                 playerHP -= enemyDamage;
//                 if (playerHP <= 0) {
//                   // The player has been defeated
//                   console.log(`You have been defeated by the ${enemyName}!`);
//                   console.log('GAME OVER');
//                   process.exit(0);
//                 } else {
//                   // The battle continues
//                   console.log(`You have ${playerHP} HP left`);
//                   console.log(`The ${enemyName} has ${enemyHP} HP left`);
//                 }
//               }
//             } else {
//               // Invalid action
//               console.log('Invalid action');
//             }
//           });
//         }
//       } else {
//         // No enemy appeared
//         console.log(`Type 'w' to walk, 'p' to print your stats, or 'q' to quit the game`);
//       }
//     } else if (answer === 'p') {
//       // Print player stats
//       console.log(`Name: ${playerName}`);
//       console.log(`HP: ${playerHP}`);
//       console.log('Inventory:');
//       for (const item of playerInventory) {
//         console.log(`- ${item}`);
//       }
//       console.log(`Type 'w' to walk, 'p' to print your stats, or 'q' to quit the game`);
//     } else if (answer === 'q') {
//       // Quit the game
//       console.log('Thanks for playing!');
//       process.exit(0);
//     } else {
//       // Invalid input
//       console.log('Invalid input');
//       console.log(`Type 'w' to walk, 'p' to print your stats, or 'q' to quit the game`);
//     }
//   });
// }
/*----------------------------------------------------------------------*/
// const readline = require('readline-sync')
// let isAlive = true;
// const name = readline.question('What is your name? ')
// class Hero{
//     constructor(name, hp, ap){
//         this.name = name
//         this.hp = hp
//         this.ap = ap
//         this.inventory = ['potion']
//     }
// }
// const player = new Hero(name, 100, 50)
// class Enemy {
//     constructor(name, hp, ap){
//         this.name = name;
//         this.hp = hp;
//         this.ap = ap;
//     }
// }
// const darthSideous = new Enemy("Darth Sideous", 50, 50)
// const darthVader = new Enemy("Darth Vader", 75, 50)
// const darthMaul = new Enemy("Darth Maul", 50, 25)
// const enemies = [darthMaul, darthSideous, darthVader]
// while(isAlive){
//     const action = readline.keyIn('Would you like to [w] Walk, [p] Print Inventory, or [q] Quit?', {limit: 'wqp'})
    
//     if(action === 'w'){
//         walk()
//     }else if (action === 'p'){
//         printInventory()
//     }else if(action === 'q'){
//        isAlive = false
//        console.log('You quit the game') 
//     }
// }
// function walk(){
//     const random = Math.floor(Math.random()*4)
//     if(random === 0){
//         enemyEncounter()
//     }else{
//         console.log('You walk safely')
//     }
// }
// function printInventory(){
//     console.log(player.inventory)
// }
// function enemyEncounter(){
//     const random = Math.floor(Math.random() * enemies.length)
//     const enemy = enemies[random]
// }